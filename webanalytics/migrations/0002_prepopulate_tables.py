# Generated by Django 2.2.9 on 2020-01-12 18:52

from django.db import migrations
import webanalytics
import identity
from django.contrib.auth.models import User


class Migration(migrations.Migration):

    dependencies = [
        ('webanalytics', '0001_initial'),
        ('identity', '0003_prepopulate_tables'),
    ]

    def create_request_types(apps, schema_editor):
        request_types = ['HTTP', 'HTTPS', 'GRPC']
        for name in request_types:
            try:
                instance = webanalytics.models.RequestType.objects.get(name=name)
            except Exception:
                instance = webanalytics.models.RequestType(name=name, description='')
                instance.save()

    def create_header_types(apps, schema_editor):
        types = ['Authentication', 'Caching', 'Client Hints', 'Conditionals', 'Connection Management', 'Content Negotiation', 'Controls', 'Cookies', 'CORS', 'Do Not Track', 'Downloads', 'Message Body Information', 'Proxies', 'Redirects', 'Request Context', 'Response Context', 'Range Requests', 'Security', 'Server-Sent Events', 'Transfer Coding', 'Websockets', 'Other']
        for name in types:
            try:
                request_header_type = webanalytics.models.RequestHeaderType.objects.get(name=name)
            except Exception:
                request_header_type = webanalytics.models.RequestHeaderType(name=name)
                request_header_type.save()

    def create_methods(apps, schema_editor):
        methods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'CONNECT', 'OPTIONS', 'TRACE']
        for method in methods:
            try:
                request_method = webanalytics.models.RequestMethod.objects.get(name=method)
            except Exception:
                request_method = webanalytics.models.RequestMethod(name=method, description='')
                request_method.save()


    def create_ip_address_types(apps, schema_editor):
        types = ['IPv4', 'IPv6', 'Invalid']
        for name in types:
            try:
                instance = webanalytics.models.IpAddressType.objects.get(name=name)
            except Exception:
                instance = webanalytics.models.IpAddressType(name=name, description='')
                instance.save()


    def create_device_types(apps, schema_editor):
        types = ['PC', 'Tablet', 'Mobile', 'TV', 'Bot']
        for name in types:
            try:
                instance = webanalytics.models.DeviceType.objects.get(name=name)
            except Exception:
                instance = webanalytics.models.DeviceType(name=name, description='')
                instance.save()

    operations = [
        migrations.RunPython(create_request_types),
        migrations.RunPython(create_header_types),
        migrations.RunPython(create_methods),
        migrations.RunPython(create_ip_address_types),
        migrations.RunPython(create_device_types),
    ]
