# Generated by Django 2.2.9 on 2020-01-12 18:53

from django.db import migrations
import identity
import sport
import utility
from django.contrib.auth.models import User
from django.utils.text import slugify


class Migration(migrations.Migration):

    dependencies = [
        ('identity', '0003_prepopulate_tables'),
        ('sport', '0001_initial'),
        ('utility', '0002_prepopulate_tables'),
    ]

    def competition_type(apps, schema_editor):
        types = ['Race', 'Trial']

        for name in types:
            try:
                competition_type = sport.models.CompetitionType.objects.get(name=name)
            except Exception:
                competition_type = sport.models.CompetitionType(name=name, description='')
                competition_type.save()

    def course_type(apps, schema_editor):
        types = ['Track', 'Trail', 'Road']

        for name in types:
            try:
                course_type = sport.models.CourseType.objects.get(name=name)
            except Exception:
                course_type = sport.models.CourseType(name=name, description='')
                course_type.save()

    def add_scoring_mechanism(apps, schema_editor):
        mechanisms = [
            {
                'name': 'Best Performance',
                'description': 'The competitors have a single attempt, where their score is used for scoring.'
            },
            {
                'name': 'Threshold',
                'description': 'Competitor\'s performance must exceed a defined value.'
            },
            {
                'name': 'Endurance',
                'description': 'Competitors must exceed a given value for as many consecutive times as possible.'
            },
            {
                'name': 'Best Attempt',
                'description': 'Competitors compete multiple times, where their best attempt is used in scoring.'
            },
        ]
        for mechanism in mechanisms:
            name = mechanism['name']
            if not sport.models.ScoringMechanism.objects.filter(name=name).exists():
                description = mechanism['description']
                instance = sport.models.ScoringMechanism(name=name, description=description)
                instance.save()

    def add_scoring_evaluation(apps, schema_editor):
        names = ['Minimization', 'Maximization']
        for name in names:
            if not sport.models.ScoringEvaluation.objects.filter(name=name).exists():
                instance = sport.models.ScoringEvaluation(name=name, description='')
                instance.save()

    def add_game_economics(apps, schema_editor):
        names = ['Constant Sum', 'Zero Sum', 'Non-zero Sum']
        for name in names:
            if not sport.models.GameEconomics.objects.filter(name=name).exists():
                instance = sport.models.GameEconomics(name=name, description='')
                instance.save()

    def add_game_types(apps, schema_editor):
        names = ['Simultaneous', 'Sequential']
        for name in names:
            if not sport.models.GameType.objects.filter(name=name).exists():
                instance = sport.models.GameType(name=name, description='')
                instance.save()

    def add_games(apps, schema_editor):
        superuser = User.objects.filter(is_superuser=True).first()
        superuser_identity = identity.models.Identity.objects.get(user_id=superuser.id)
        games = [
            {
                'name': 'Race',
                'economics': 'Zero Sum',
                'type': 'Simultaneous',
                'evaluation': 'Minimization',
                'mechanism': 'Best Performance',
                'quantity': 'Time',
                'is_perfect_information': False
            },
            {
                'name': 'Time Trial',
                'economics': 'Zero Sum',
                'type': 'Sequential',
                'evaluation': 'Minimization',
                'mechanism': 'Best Performance',
                'quantity': 'Time',
                'is_perfect_information': False
            }
        ]
        for game in games:
            name = game['name']
            if not sport.models.Game.objects.filter(name=name).exists():
                economics = game['economics']
                type = game['type']
                evaluation = game['evaluation']
                mechanism = game['mechanism']
                quantity = game['quantity']
                is_perfect_information = game['is_perfect_information']
                economics_instance = sport.models.GameEconomics.objects.get(name=economics)
                type_instance = sport.models.GameType.objects.get(name=type)
                evaluation_instance = sport.models.ScoringEvaluation.objects.get(name=evaluation)
                mechanism_instance = sport.models.ScoringMechanism.objects.get(name=mechanism)
                quantity_instance = utility.models.Quantity.objects.get(name=quantity)
                instance = sport.models.Game(name=name, description='', economics=economics_instance, type=type_instance, scoring_evaluation=evaluation_instance, scoring_mechanism=mechanism_instance, scoring_quantity=quantity_instance, is_perfect_information=is_perfect_information, is_symmetric=False, is_cooperative=False, is_move_by_nature=False, created_by=superuser_identity)
                instance.save()

    def add_activities(apps, schema_editor):
        superuser = User.objects.filter(is_superuser=True).first()
        superuser_identity = identity.models.Identity.objects.get(user_id=superuser.id)
        activities = {
            'Physical': {
                'Athletics': ('Throwing', 'Jumping', 'Running', 'Swimming', 'Walking', 'Cycling', 'Multi-Events'),
                'Jumping': ("High Jump", "Pole Vault", "Long Jump", "Triple Jump"),
                'Throwing': ("Shot Put", "Discus Throw", "Hammer Throw", "Javelin Throw"),
                'Multi-Events': ("Heptathlon", "Pentathlon", 'Decathlon', 'Triathlon', 'Duathlon'),
                'Running': ('Hurdles', 'Steeplechase', 'Mountain Running', 'Ultramarathon')
            }
        }
        for type_name in activities:
            type_instance = sport.models.ActivityType.objects.filter(name=type_name).first()
            if not type_instance:
                type_instance = sport.models.ActivityType(name=type_name, description='')
                type_instance.save()

            activities = activities[type_name]
            for activity_name in activities:
                parent_activity = sport.models.Activity.objects.filter(type=type_instance, name=activity_name).first()
                if not parent_activity:
                    parent_activity = sport.models.Activity(type=type_instance, name=activity_name, description='', wikipedia='', is_group=False, created_by=superuser_identity)
                    parent_activity.save()

                for child_activity_name in activities[activity_name]:
                    child_activity = sport.models.Activity.objects.filter(type=type_instance, parent=parent_activity, name=child_activity_name).first()
                    if not child_activity:
                        child_activity = sport.models.Activity(type=type_instance, parent=parent_activity, name=child_activity_name, description='', wikipedia='', is_group=True, created_by=superuser_identity)
                        child_activity.save()


    def add_annotation_types(apps, schema_editor):
        pass

    def add_outcome_states(apps, schema_editor):
        states = [
            {"code":"CPLT", "name": "Complete"},
            {"code":"DQ", "name":"Disqualified"},
            {"code":"DNS", "name":"Did Not Start"},
            {"code":"SCR", "name":"Scratch"},
            {"code":"DNC", "name":"Did Not Compete"},
        ]

        for state in states:
            code = state['code']
            name = state['name']
            try:
                instance = sport.models.OutcomeState.objects.get(code=code, name=name)
            except Exception:
                instance = sport.models.OutcomeState(code=code, name=name, description='')
                instance.save()

    def add_race_outcome_states(apps, schema_editor):
        states = [
            {"code":"FINISH", "name":"Finished"},
            {"code":"DNF", "name":"Did Not Finish"},
            {"code":"FS", "name":"False Start"},
            {"code":"DQ", "name":"Disqualified"},
            {"code":"-", "name":"-"},
            {"code":"DNS", "name":"Did Not Start"},
            {"code":"NT", "name":"No Time (either not available or not known)"},
            {"code":"SCR", "name":"Scratch"},
            {"code":"DNC", "name":"Did Not Compete"},
            {"code":"PB", "name":"Personal Best"},
            {"code":"SB", "name":"Season Best"}
        ]

        for state in states:
            code = state['code']
            name = state['name']
            try:
                instance = sport.models.RaceOutcomeState.objects.get(code=code, name=name)
            except Exception:
                instance = sport.models.RaceOutcomeState(code=code, name=name, description='')
                instance.save()

    def add_attempt_states(apps, schema_editor):
        states = [
            {"code":"ND", "name":"No Distance"},
            {"code":"FOUL", "name":"FOUL"},
            {"code":"PASS", "name":"PASS"},
            {"code":"PPP", "name":"PPP"},
            {"code":"NH", "name":"No Height"},
            {"code":"DQ", "name":"Disqualified"},
            {"code":"-", "name":"-"},
            {"code":"TP", "name":""},
            {"code":"NP", "name":""},
            {"code":"SCR", "name":"Scratch"},
            {"code":"DNC", "name":"Did Not Compete"},
            {"code":"NM", "name":"No Mark"},
            {"code":"PB", "name":"Personal Best"},
            {"code":"SB", "name":"Season Best"}
        ]

        for state in states:
            code = state['code']
            name = state['name']
            try:
                instance = sport.models.AttemptState.objects.get(code=code, name=name)
            except Exception:
                instance = sport.models.AttemptState(code=code, name=name, description='')
                instance.save()

    def add_environments(apps, schema_editor):
        environments = ['Indoor', 'Outdoor']

        for name in environments:
            try:
                environment = sport.models.Environment.objects.get(name=name)
            except Exception:
                environment = sport.models.Environment(name=name, description='')
                environment.save()


    def add_legitimacies(apps, schema_editor):
        data = [
            {"name":"Verified", "description":"The value was verified by the governing organization to be legitimate"},
            {"name":"Statistical Anomaly", "description":"Based on other information, the value is statistically unlikely"},
            {"name":"Beyond Best", "description":"The value is better than the current best"}
        ]

        for item in data:
            try:
                instance = sport.models.Legitimacies.objects.get(**item)
            except Exception:
                instance = sport.models.Legitimacies(**item)
                instance.save()

    def add_modes(apps, schema_editor):
        modes = ['Run', 'Walk', 'Wheel chair', 'Swim', 'Bike']

        for name in modes:
            try:
                instance = sport.models.Mode.objects.get(name=name)
            except Exception:
                instance = sport.models.Mode(name=name, description='')
                instance.save()

    def add_event_types(apps, schema_editor):
        event_types = ('Sport', 'Social')
        for type in event_types:
            if not sport.models.EventType.objects.filter(name=type).exists():
                event_type = sport.models.EventType.objects.create(name=type, description='')

    def add_social_class(apps, schema_editor):
        data = [{
            'name': 'Freshman',
            'code': 'FR',
            'aliases': ['FR-1', 'FR', 'FR.', '1', 'Freshman']
            },
            {
                'name': 'Sophomore',
                'code': 'SO',
                'aliases': ['SO-2', 'FR', 'FR.', '2', 'Sophomore']
            },
            {
                'name': 'Junior',
                'code': 'JR',
                'aliases': ['JR-3', 'JR', 'JR.', '3', 'Junior']
            },
            {
                'name': 'Senior',
                'code': 'SR',
                'aliases': ['SR-4', 'SR', 'SR.', '4', 'Senior']
            },
        ]
        for item in data:
            aliases = item.pop('aliases', [])
            try:
                instance = sport.models.SocialClass.objects.get(**item)
            except Exception:
                instance = sport.models.SocialClass(**item)
                instance.save()

            for alias in aliases:
                try:
                    alias_instance = sport.models.SocialClassAlias.objects.get(social_class=instance, value=alias)
                except Exception:
                    alias_instance = sport.models.SocialClassAlias(social_class=instance, value=alias)
                    alias_instance.save()


    def add_seed_methods(apps, schema_editor):
        pass

    def add_strategies(apps, schema_editor):
        strategies = ['Positive', 'Negative', 'Even', 'Sit and Kick', 'Oscillating']
        for name in strategies:
            try:
                instance = sport.models.Strategy.objects.get(name=name)
            except Exception:
                instance = sport.models.Strategy(name=name, description='')
                instance.save()

    def add_tiers(apps, schema_editor):
        tiers = ['Qualifications', 'Quarterfinals', 'Semifinals', 'Finals']
        levels = [3, 2, 1, 0]
        for name, level in zip(tiers, levels):
            try:
                instance = sport.models.Tier.objects.get(name=name, level=level)
            except Exception:
                instance = sport.models.Tier(name=name, level=level)
                instance.save()

    def add_outcome_types(apps, schema_editor):
        names = ['Valid', 'Invalid']
        for name in names:
            try:
                instance = sport.models.OutcomeType.objects.get(name=name, description='')
            except Exception:
                instance = sport.models.OutcomeType(name=name, description='')
                instance.save()

    operations = [
        migrations.RunPython(add_scoring_mechanism),
        migrations.RunPython(add_tiers),
        migrations.RunPython(add_strategies),
        migrations.RunPython(add_environments),
        migrations.RunPython(add_outcome_states),
        migrations.RunPython(add_race_outcome_states),
        migrations.RunPython(add_attempt_states),
        migrations.RunPython(add_activities),
        migrations.RunPython(add_scoring_mechanism),
        migrations.RunPython(add_scoring_evaluation),
        migrations.RunPython(add_game_economics),
        migrations.RunPython(add_game_types),
        migrations.RunPython(add_games),
        migrations.RunPython(add_modes),
        migrations.RunPython(add_legitimacies),
        migrations.RunPython(add_social_class),
        migrations.RunPython(add_event_types),
        migrations.RunPython(competition_type),
        migrations.RunPython(course_type),
        migrations.RunPython(add_outcome_types)
    ]
