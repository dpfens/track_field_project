# Generated by Django 2.2.11 on 2020-03-21 22:40

from django.db import migrations
from datetime import datetime
from sport import models
from django.contrib.auth.models import User
from identity import models as identity_models
from geography import models as geography_models
from sport.models import athletics as athletics_models
import utility
import json


def parse_time(text):
    multipliers = (1.0, 60.0, 3600.0)
    parts = text.split(':')
    part_count = len(parts)
    output = 0.0
    for i in range(part_count - 1, -1, -1):
        part = float(parts[i])
        multiplier = multipliers[i]
        output += part * multiplier
    return output


def create_entity(name, entity_type, creator, **kwargs):
    existing_entity = identity_models.Entity.objects.filter(name=name, entity_type=entity_type).first()
    if not existing_entity:
        website = kwargs.get('website')
        entity = identity_models.Entity(name=name, entity_type=entity_type, knowledge_graph_id=None, website=website, created_by=creator)
        entity.save()
    else:
        entity = existing_entity

    aliases = kwargs.get('aliases', [])
    for alias in aliases:
        if alias == aliases[0]:
            preferred = 1
        else:
            preferred = 0
        existing_aliases = identity_models.EntityAlias.objects.filter(entity=entity, name=alias).exists()
        if not existing_aliases:
            alias_instance = identity_models.EntityAlias(entity=entity, name=alias, preferred_indicator=preferred, created_by=creator)
            alias_instance.save()

    return entity


def create_identity(entity, id, name, identity_type, creator, **kwargs):
    existing_identity = identity_models.Identity.objects.filter(name=name, identifier=name, identity_type=identity_type).first()
    if not existing_identity:
        organization = kwargs.get('organization')
        identity = identity_models.Identity(organization=organization, name=name, identifier=id, identity_type=identity_type, is_private=False, created_by=creator)
        identity.save()
    else:
        identity = existing_identity

    existing_entity_identity = identity_models.EntityIdentity.objects.filter(entity=entity, identity=identity).first()
    if not existing_entity_identity:
        entity_identity = identity_models.EntityIdentity(entity=entity, identity=identity, is_private=False, created_by=creator)
        entity_identity.save()

    organization_type = kwargs.get('organization_type')
    if organization_type:
        existing_identity_organizations = identity_models.IdentityOrganization.objects.filter(identity=identity, organization_type=organization_type).first()
        if not existing_identity_organizations:
            formation_date = kwargs.get('formation_date')
            identity_organization = identity_models.IdentityOrganization(identity=identity, organization_type=organization_type, formation_date=formation_date, created_by=creator)
            identity_organization.save()

    return identity


def create_entity_identity(name, entity_type, identity_type, creator, **kwargs):
    entity = create_entity(name, entity_type, creator, **kwargs)
    identity = create_identity(entity, name, identity_type, creator, **kwargs)
    return entity, identity


class Migration(migrations.Migration):

    dependencies = [
        ('sport', '0002_prepopulate_tables'),
        ('geography', '0002_constraints'),
    ]

    def create_open_meet(app, schema_editor):
        superuser = User.objects.filter(is_superuser=True).first()
        superuser_identity = identity_models.Identity.objects.get(user_id=superuser.id)

        outdoor_environment = models.Environment.objects.filter(name='Outdoor').first()
        if not outdoor_environment:
            outdoor_environment = models.Environment.objects.create(name='Outdoor', description='', created_by=superuser_identity)

        venue_name = 'Valencia, City of Arts and Sciences'
        venue = geography_models.Venue.objects.filter(name=venue_name).first()
        if not venue:
            venue_slug = venue_name.lower().replace(' ', '-').replace(',', '')
            venue = geography_models.Venue.objects.create(name=venue_name, slug=venue_slug)

        activity = models.Activity.objects.get(name='Running')
        field_of_play = models.FieldOfPlay.objects.filter(venue=venue, name=venue_name).first()
        if not field_of_play:
            established = datetime(1981, 12, 5)
            retired = None
            field_of_play = models.FieldOfPlay.objects.create(venue=venue, name=venue_name, established=established, retired=retired, created_by=superuser_identity)

        meters = utility.models.Unit.objects.filter(name='Meter').first()
        course = athletics_models.Course.objects.filter(field_of_play=field_of_play, distance=42195, distance_unit=meters).first()
        if not course:
            course_type = athletics_models.CourseType.objects.filter(name='Road').first()
            course = athletics_models.Course.objects.create(course_type=course_type, field_of_play=field_of_play, distance=42195, distance_unit=meters, created_by=superuser_identity)

        event_url = 'https://www.valenciaciudaddelrunning.com/en/marathon'
        event_type = models.EventType.objects.filter(name='Sport').first()
        event = models.Event.objects.create(event_type=event_type, environment=outdoor_environment, name=u'MaratÃ³n de Valencia', slug='valencia-marathon', website=event_url, created_by=superuser_identity)

        event_start_date = datetime(2014, 12, 1)
        event_end_date = datetime(2014, 12, 3)
        event_url = 'https://www.valenciaciudaddelrunning.com/en/marathon/previous-editions-marathon/ranking-marathon-2014/'
        meet_name = '2014 Valencia Marathon'
        event_instance = models.EventInstance.objects.create(event=event, name=meet_name, slug='2014-valencia-marathon', start_date=event_start_date, end_date=event_end_date, website=event_url, participants=0, created_by=superuser_identity)

        competition_type = models.CompetitionType.objects.filter(name='Race').first()
        run_mode = models.Mode.objects.filter(name='Run').first()
        game_instance = models.Game.objects.get(name='Race')

        competition = models.Competition.objects.filter(event=event_instance, competition_type=competition_type, game=game_instance, activity=activity, field_of_play=field_of_play, name='Marathon', slug='2014-valencia-marathon').first()
        if not competition:
            competition = models.Competition.objects.create(event=event_instance, competition_type=competition_type, game=game_instance, activity=activity, field_of_play=field_of_play, name='Marathon', slug='2014-valencia-marathon', url='', participants=0, created_by=superuser_identity)

            athletics_models.CompetitionRace.objects.create(competition=competition, course=course, start_interval=0, distance=42195, distance_unit=meters, mode=run_mode, created_by=superuser_identity)

        tier = models.Tier.objects.filter(name='Finals').first()

        heat = athletics_models.Heat.objects.filter(competition=competition, name='Open').first()
        if not heat:
            heat = athletics_models.Heat.objects.create(competition=competition, tier=tier, name='Open', is_overall=True, created_by=superuser_identity)

        seconds_unit = utility.models.Unit.objects.filter(name='Second').first()
        complete_outcome_state = models.OutcomeState.objects.filter(code='CPLT').first()

        finished_race_outcome_state = athletics_models.RaceOutcomeState.objects.filter(code='FINISH').first()
        verified_legitimacy = models.Legitimacies.objects.filter(name='Verified').first()

        person_entity_type = identity_models.EntityType.objects.filter(name='Person').first()
        person_identity_type = identity_models.IdentityType.objects.filter(name='Person').first()
        outcome_type = models.OutcomeType.objects.filter(name='Valid').first()

        org_entity_type = identity_models.EntityType.objects.filter(name='Organization').first()
        org_identity_type = identity_models.IdentityType.objects.filter(name='Organization').first()
        club_org_type = identity_models.OrganizationType.objects.filter(name='Club').first()

        file_name = 'sport/migrations/data/athletics/open_meet.json'
        with open(file_name, 'r') as input_file:
            data = json.load(input_file)
        total_rows = len(data)

        for index, row in enumerate(data):
            if index % 50 == 0:
                print('Uploading row %i of %i' % (index + 1, total_rows))
            club = row['Club']
            place = row['Position']
            id = row['id']
            bib = row['Dorsal']
            raw_time = row['Tiempo Oficial']
            raw_name = row['Number']
            middle_name = None
            if ',' in raw_name:
                last_name, first_middle_name = raw_name.split(',')
                first_middle_name_parts = first_middle_name.split()
                if len(first_middle_name_parts) > 1:
                    first_name, middle_name = first_middle_name.split(' ', 1)
                    middle_name = middle_name.strip()
                else:
                    first_name, middle_name = first_middle_name, None
            else:
                name_parts = raw_name.split(' ')
                name_part_count = len(name_parts)
                if name_part_count == 2:
                    first_name, last_name = name_parts
                elif name_part_count > 2:
                    first_name = name_parts[0]
                    last_name = ' '.join(name_parts[1:])
            first_name = first_name.strip()
            last_name = last_name.strip()

            person_entity = create_entity(raw_name, person_entity_type, superuser_identity, aliases=[raw_name])
            person_identity = create_identity(person_entity, id, raw_name, person_identity_type, superuser_identity)

            identity_person = identity_models.IdentityPerson.objects.filter(identity=person_identity).first()
            if not identity_person:
                if 'MASC' in club:
                    gender = identity_models.Gender.objects.filter(name='Male').first()
                else:
                    gender = identity_models.Gender.objects.filter(name='Female').first()
                identity_person = identity_models.IdentityPerson.objects.create(identity=person_identity, gender=gender, given_name=first_name, middle_name=middle_name, last_name=last_name, created_by=superuser_identity)

            if club != 'INDEPENDIENTE':
                club_entity = create_entity(club, org_entity_type, superuser_identity, aliases=[club])
                club_identity = create_identity(club_entity, club, club, org_identity_type, superuser_identity, organization_type=club_org_type)
                unattached = False
            else:
                club_identity = None
                unattached = True

            outcome = models.Outcome.objects.filter(event=event_instance, competition=competition, organization=club_identity, identity=person_identity).first()
            if not outcome:
                time = parse_time(raw_time)
                outcome = models.Outcome.objects.create(event=event_instance, competition=competition, organization=club_identity, identity=person_identity, field_of_play=field_of_play, value=time, unit=seconds_unit, place=place, state=complete_outcome_state, legitimacy=verified_legitimacy, type=outcome_type, created_by=superuser_identity)
                athletics_models.RaceOutcome.objects.create(outcome=outcome, heat=heat, mode=run_mode, bib=bib, points=None, state=finished_race_outcome_state, unattached=unattached, created_by=superuser_identity)

    def create_track_field_race(app, schema_editor):
        file_name = 'sport/migrations/data/athletics/open_meet.json'

    def create_track_field_field(app, schema_editor):
        file_name = 'sport/migrations/data/athletics/open_meet.json'

    def create_track_field_relay(app, schema_editor):
        superuser = User.objects.filter(is_superuser=True).first()
        superuser_identity = identity_models.Identity.objects.get(user_id=superuser.id)

        federation_identity = identity_models.Identity.objects.filter(name='European Athletics Association').first()

        category = models.Category.objects.filter(name='European Athletics Events').first()
        if not category:
            category = models.Category.objects.create(name='European Athletics Events', description='')

        indoor_environment = models.Environment.objects.filter(name='Indoor').first()
        if not indoor_environment:
            indoor_environment = models.Environment.objects.create(name='Indoor', description='', created_by=superuser_identity)

        venue_name = 'Ferry-Dusika-Hallenstadion'
        venue = geography_models.Venue.objects.filter(name=venue_name).first()
        if not venue:
            venue = geography_models.Venue.objects.create(name=venue_name)

        activity_instance = models.Activity.objects.filter(name='Running').first()
        field_of_play_name = 'FHD - 200m Track'
        field_of_play = models.FieldOfPlay.objects.filter(name=field_of_play_name, venue=venue).first()
        if not field_of_play:
            established = datetime(1976, 1, 1)
            retired = None
            field_of_play = models.FieldOfPlay.objects.create(name=field_of_play_name, venue=venue, established=established, retired=retired, created_by=superuser_identity)

        meters = utility.models.Unit.objects.filter(name='Meter').first()
        course_type = athletics_models.CourseType.objects.filter(name='Road').first()
        course = athletics_models.Course.objects.filter(course_type=course_type, field_of_play=field_of_play, distance=200, distance_unit=meters).first()
        if not course:
            course = athletics_models.Course.objects.create(course_type=course_type, field_of_play=field_of_play, distance=200, distance_unit=meters, created_by=superuser_identity)

        event_name = "European Athletics Indoor Championships"
        event_slug = 'european-athletics-indoor-championships'
        event_type = models.EventType.objects.filter(name='Sport').first()
        event = models.Event.objects.filter(event_type=event_type, environment=indoor_environment, name=event_name, slug=event_slug).first()
        if not event:
            event = models.Event.objects.create(event_type=event_type, environment=indoor_environment, name=event_name, slug=event_slug, created_by=superuser_identity)

        meet_start_date = datetime(2002, 3, 1)
        meet_end_date = datetime(2002, 3, 3)
        meet_url = "http://www.european-athletics.org/competitions/european-athletics-indoor-championships/history/year=2002/results/index.html"
        event_instance = models.EventInstance.objects.filter(event=event, name="27th European Athletics Indoor Championships").first()
        if not event_instance:
            event_instance = models.EventInstance.objects.create(event=event, name="27th European Athletics Indoor Championships", start_date=meet_start_date, end_date=meet_end_date, website=meet_url, participants=0, created_by=superuser_identity)

        seconds_unit = utility.models.Unit.objects.filter(name='Second').first()
        complete_outcome_state = models.OutcomeState.objects.filter(code='CPLT').first()

        run_mode = models.Mode.objects.filter(name='Run').first()
        competition_type = models.CompetitionType.objects.filter(name='Race').first()
        outcome_type = models.OutcomeType.objects.filter(name='Valid').first()

        game_instance = models.Game.objects.get(name='Race')

        competition = models.Competition.objects.filter(event=event_instance, activity=activity_instance, field_of_play=field_of_play, game=game_instance, name='4 x 400m Men', slug='4-400m-men').first()
        if not competition:
            competition = models.Competition.objects.create(event=event_instance, competition_type=competition_type, activity=activity_instance, field_of_play=field_of_play, game=game_instance, name='4 x 400m Men', slug='4-400m-men', description='', url=meet_url, participants=0, created_by=superuser_identity)
            athletics_models.CompetitionRace.objects.create(competition=competition, course=course, start_interval=0, mode=run_mode, distance=1600, distance_unit=meters, created_by=superuser_identity)

        finals_tier = models.Tier.objects.filter(name='Finals').first()
        heat = models.Heat.objects.filter(competition=competition, tier=finals_tier).first()
        if not heat:
            heat = models.Heat.objects.create(competition=competition, tier=finals_tier, name='Overall', is_overall=True, created_by=superuser_identity)

        org_entity_type = identity_models.EntityType.objects.filter(name='Organization').first()
        org_identity_type = identity_models.IdentityType.objects.filter(name='Organization').first()
        team_entity = create_entity('Poland', org_entity_type, superuser_identity)
        team_identity = create_identity(team_entity, 'POL', 'Poland', org_identity_type, superuser_identity)
        relay_identity_type = identity_models.IdentityType.objects.filter(name='Relay').first()
        relay_identity = create_identity(team_entity,  'Poland1', 'Poland', relay_identity_type, superuser_identity, organization=team_identity)

        verified_legitimacy = models.Legitimacies.objects.filter(name='Verified').first()
        finished_race_outcome_state = athletics_models.RaceOutcomeState.objects.filter(code='FINISH').first()

        outcome = models.Outcome.objects.filter(event=event_instance, competition=competition, organization=team_identity, identity=relay_identity).first()
        if not outcome:
            outcome = models.Outcome.objects.create(event=event_instance, competition=competition, organization=team_identity, identity=relay_identity, field_of_play=field_of_play, value=185.5, unit=seconds_unit, place=1, state=complete_outcome_state, legitimacy=verified_legitimacy, type=outcome_type, created_by=superuser_identity)
            race_outcome = athletics_models.RaceOutcome.objects.create(outcome=outcome, heat=heat, mode=run_mode, bib=None, points=1, state=finished_race_outcome_state, unattached=False, reaction_time=None, wind=None, created_by=superuser_identity)
        else:
            race_outcome = athletics_models.RaceOutcome.objects.filter(outcome=outcome).first()

        athlete_data = [
            {
                "weight": {
                    "value": 65,
                    "units": "kg"
                },
                "id": 194706,
                "url": "http://www.european-athletics.org/athletes/group=g/athlete=194706-gasiewski-artur/index.html",
                "text": "Artur G\u0105siewski",
                "age": "",
                "height": {
                    "value": 176,
                    "units": "cm"
                },
                "born": datetime(1973, 11, 1),
                "team": "RKS Skra Warszawa"
            },
            {
                "id": 143520,
                "url": "https://www.european-athletics.org/athletes/group=p/athlete=143520-plawgo-marek/index.html",
                "text": "Marek Plawgo"
            },
            {
                "id": 200992,
                "url": "https://www.european-athletics.org/athletes/group=r/athlete=200992-rysiukiewicz-piotr/index.html",
                "text": "Piotr Rysiukiewicz"
            },
            {
                "id": 188474,
                "url": "https://www.european-athletics.org/athletes/group=m/athlete=188474-mackowiak-robert/index.html",
                "text": "Robert MaÄkowiak"
            }
        ]

        entity_type = identity_models.EntityType.objects.filter(name='Person').first()
        identity_type = identity_models.IdentityType.objects.filter(name='Person').first()
        gender = identity_models.Gender.objects.filter(name='Male').first()
        for index, athlete in enumerate(athlete_data):
            name = athlete['text']
            athlete_id = athlete['id']
            athlete_entity = create_entity(name, entity_type, superuser_identity)
            athlete_identity = create_identity(athlete_entity, athlete_id, name, identity_type, superuser_identity)
            athlete_person = identity_models.IdentityPerson.objects.filter(identity=athlete_identity).first()
            if not athlete_person:
                first_name, last_name = name.split()
                born = athlete.get('born')
                athlete_person = identity_models.IdentityPerson(identity=athlete_identity, gender=gender, given_name=first_name, last_name=last_name, date_of_birth=born, created_by=superuser_identity)
                athlete_person.save()

            if athletics_models.RelayMember.objects.filter(relay=relay_identity, identity=athlete_identity, is_alternate=False).exists():
                athletics_models.RelayMember.objects.create(relay=relay_identity, identity=athlete_identity, is_alternate=False)

            relay_member = athletics_models.RelayOrder.objects.filter(race_outcome=race_outcome, relay=relay_identity, identity=athlete_identity).first()
            if not relay_member:
                relay_member = athletics_models.RelayOrder.objects.create(race_outcome=race_outcome, relay=relay_identity, identity=athlete_identity, sequence=index + 1, distance=400, created_by=superuser_identity)

    operations = [
        migrations.RunPython(create_open_meet),
        migrations.RunPython(create_track_field_relay),
    ]
